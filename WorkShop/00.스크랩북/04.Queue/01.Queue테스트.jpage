/*****************************************************************/int tryNum = 10000;// QueueHandler 자체 설정net.dstone.common.queue.QueueHandler.QUEUE_CHECK_INTERVAL	= 1000; //큐를 감시할 시간간격.(밀리세컨단위)net.dstone.common.queue.QueueHandler.FETCH_SIZE_BY_ONE		= 500; 	//큐에 아이템이 있을 경우 Fetch해올 큐아이템 갯수. -1 이면 큐의 모든 아이템을 Fetch해온다.// QueueHandler가 사용할 TaskHandler 설정net.dstone.common.queue.QueueHandler.EXECUTOR_TYPE			= net.dstone.common.queue.QueueHandler.EXECUTOR_TYPE_CACHED;//   TaskHandler-Cached 쓰레드풀 타입일때//   별도설정 필요없음. FETCH_SIZE_BY_ONE 설정으로 인입 요청건수를 조절해주고 처리 쓰레드풀 타입을 Cached 로 했을 때 Best 성능을 보여줌.//   TaskHandler-Custom 쓰레드풀 타입일때net.dstone.common.queue.QueueHandler.CORE_POOL_SIZE 		= 100; 		//(기본풀사이즈)net.dstone.common.queue.QueueHandler.MAXIMUM_POOL_SIZE 		= 100; 		//(최대퓰사이즈)net.dstone.common.queue.QueueHandler.QUEUE_CAPACITY 		= 10000;	//(큐용량-corePoolSize보다 쓰레드요청이 많아졌을 경우 이 수치만큼 큐잉한다. 이 수치가 넘어가게 되면 maximumPoolSize까지 쓰레드가 생성됨. corePoolSize+queueCapacity+maximumPoolSize 를 넘어가는 요청이 발생 시 RejectedExecutionException이 발생)net.dstone.common.queue.QueueHandler.KEEP_ALIVE_TIME 		= 1000; 	//(쓰레드미사용시 제거대기시간-corePoolSize보다 쓰레드요청이 많아졌을 경우 queueCapacity까지 큐잉되다가 큐잉초과시 maximumPoolSize까지 쓰레드가 생성되는데 keepAliveTime시간만큼 유지했다가 다시 corePoolSize로 돌아가는동안 유지되는 시간을 의미)//   TaskHandler-Fixed 쓰레드풀 타입일때net.dstone.common.queue.QueueHandler.POOL_SIZE_WHEN_FIXED 	= 50; 		//(FIXED 타입일때 퓰사이즈)//   TaskHandler-Single 쓰레드풀 타입일때//   별도설정 필요없음./*****************************************************************/net.dstone.common.utils.DateUtil.stopWatchStart("01.Queue테스트");
try {		for(int i =0; i<tryNum; i++){				net.dstone.common.queue.QueueItem item = new net.dstone.common.queue.QueueItem(){			@Override			public void doTheJob(){				try{					Thread.sleep(1000);					System.out.println(this.getId() + "'s Job done !!");				}catch(Exception e){					e.printStackTrace();				}			}		};		item.setId("QueueItem-" + i);				net.dstone.common.queue.QueueHandler.getInstance().addQueue(item);	}	
} catch (Exception e) {
	e.printStackTrace();
} finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("01.Queue테스트");}