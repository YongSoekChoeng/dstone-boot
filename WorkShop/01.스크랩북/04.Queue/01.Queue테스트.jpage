/*****************************************************************/int tryNum = 3000;String queueServiceId = "QUEUE_HANDLER";String executorServiceId = "TASK_HANDLER";/*****************************************************************/try {		net.dstone.common.utils.DateUtil.stopWatchStart("01.Queue테스트");	net.dstone.common.queue.QueueHandler.Config conf = net.dstone.common.queue.QueueHandler.getInstance().newConfig();	conf.setQueueCheckInterval(10000);	conf.setQueueFetchSizeByOne(1000);	conf.setExecutorServiceId(executorServiceId);		//conf.setExecutorType(net.dstone.common.queue.QueueHandler.EXECUTOR_TYPE_CACHED);	//conf.setExecutorType(net.dstone.common.queue.QueueHandler.EXECUTOR_TYPE_CUSTOM);	conf.setExecutorType(net.dstone.common.queue.QueueHandler.EXECUTOR_TYPE_FIXED);	if(net.dstone.common.queue.QueueHandler.EXECUTOR_TYPE_CUSTOM.equals(conf.getExecutorType())){		conf.setCorePoolSize(100);		conf.setMaximumPoolSize(100);		conf.setQueueCapacity(10000);		conf.setKeepAliveTime(1000);	}else if(net.dstone.common.queue.QueueHandler.EXECUTOR_TYPE_FIXED.equals(conf.getExecutorType())){		conf.setPoolSizeWhenFixed(50);	}	net.dstone.common.queue.QueueHandler.getInstance().addQueueService(queueServiceId, conf);	for(int i =0; i<tryNum; i++){				net.dstone.common.queue.QueueItem item = new net.dstone.common.queue.QueueItem(){			@Override			public void doTheJob(){				try{					Thread.sleep(1000);					//System.out.println(this.getId() + "'s Job done !!");				}catch(Exception e){					e.printStackTrace();				}			}		};		item.setId("QueueItem-" + i);		net.dstone.common.queue.QueueHandler.getInstance().getQueueService(queueServiceId).addQueue(item);	}} catch (Exception e) {	e.printStackTrace();} finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("01.Queue테스트");}