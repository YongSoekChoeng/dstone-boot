net.dstone.common.utils.DateUtil.stopWatchStart("00.연습장");try {		/*	String xmlFile = "D:/Temp/TestSql.xml";	StringBuffer buff = new StringBuffer();	String[] lines = net.dstone.common.utils.FileUtil.readFileByLines(xmlFile);	for(String line : lines){		buff.append("INSERT_TB_METRIX.append(\"").append(line).append("\").append(\"\\n\");").append("\n");	}	System.out.println(buff);	*/			String path =  "D:/Swap/참조소스/승재/anybiz_prd/WEB-INF/classes" + "/kr/co/gnx/base/BaseDAO.java";		/*	java.util.List<java.util.Map<String, String>> result = null;	result = net.dstone.common.tools.analyzer.util.ParseUtil.getMtdListFromJava( net.dstone.common.utils.FileUtil.readFile(path, "EUC-KR"));		for( java.util.Map<String, String> mtd : result ){		System.out.println("||========================================================================||");		System.out.println(mtd);		System.out.println("||========================================================================||\n");	}	*/		/*	java.util.HashMap<String, String> MEMBER_VALUE_MAP = new java.util.HashMap<String, String>();		com.github.javaparser.ast.CompilationUnit cu = com.github.javaparser.StaticJavaParser.parse(new java.io.File(path));	java.util.List<com.github.javaparser.ast.body.FieldDeclaration> fieldDeclarationList = cu.findAll(com.github.javaparser.ast.body.FieldDeclaration.class);	System.out.println("||========================================================================||");	String fieldName = "";	String fieldValue = "";	for(com.github.javaparser.ast.body.FieldDeclaration fieldDec : fieldDeclarationList) {		fieldName = "";		fieldValue = "";		com.github.javaparser.ast.body.VariableDeclarator varDec = fieldDec.getVariables().get(0);		fieldName = varDec.getNameAsString();		if( fieldDec.isPrivate() && fieldDec.isStatic() && fieldDec.isFinal() && fieldName.toLowerCase().endsWith("mapper") ){			java.util.List<com.github.javaparser.ast.Node> nodeList = varDec.getChildNodes();			if(nodeList.size()>2) {				fieldValue = nodeList.get(2).toString();				fieldValue = net.dstone.common.utils.StringUtil.replace(fieldValue, "\"", "");								MEMBER_VALUE_MAP.put(fieldName, fieldValue);			}			//System.out.println( "fieldName["+fieldName+"]" +  " fieldValue["+fieldValue+"]" );		}			}		System.out.println("||========================================================================||");	System.out.println("");	System.out.println("||========================================================================||");	java.util.List<com.github.javaparser.ast.body.MethodDeclaration> methodDeclarationList = cu.findAll(com.github.javaparser.ast.body.MethodDeclaration.class);	String methodName = "";	String methodReturnValue = "";	String methodBody = "";	String[] div = {";"};	for(com.github.javaparser.ast.body.MethodDeclaration methodDec : methodDeclarationList) {		methodName = methodDec.getNameAsString();		methodReturnValue = "";		methodBody = methodDec.getBody().get().toString();		if( methodDec.isStatic() && methodName.toLowerCase().startsWith("get") && methodName.toLowerCase().endsWith("mapper") && "String".equals(methodDec.getTypeAsString()) ){			methodReturnValue = net.dstone.common.utils.StringUtil.nextWord(methodBody, "return ", div);			System.out.println( "methodName["+methodName+"]" +  " methodReturnValue["+ MEMBER_VALUE_MAP.get(methodReturnValue) +"]" );		}	}	System.out.println("||========================================================================||");	*/	} catch (Exception e) {	e.printStackTrace();}finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("00.연습장");}/*String sql = net.dstone.common.utils.FileUtil.readFile("D:/Temp/TestSql.xml");net.dstone.common.tools.analyzer.AppAnalyzer.WRITE_PATH = "D:/Temp/anlaysis/";java.util.List<String> tblList = net.dstone.common.tools.analyzer.util.ParseUtil.getMannalTableList();System.out.println( net.dstone.common.utils.SqlUtil.getTableNamesWithTblList(sql, tblList) );*/