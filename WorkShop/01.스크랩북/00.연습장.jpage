/*****************************************************//*****************************************************/net.dstone.common.utils.DateUtil.stopWatchStart("00.연습장");try {		/*	String xmlFile = "D:/Temp/TestSql.xml";	StringBuffer buff = new StringBuffer();	String[] lines = net.dstone.common.utils.FileUtil.readFileByLines(xmlFile);	for(String line : lines){		buff.append("INSERT_TB_METRIX.append(\"").append(line).append("\").append(\"\\n\");").append("\n");	}	System.out.println(buff);	*/		String queryFile = "";	String sql = "";			/*	queryFile = "D:/Temp/TestSql.xml";	net.dstone.common.utils.XmlUtil xml = net.dstone.common.utils.XmlUtil.getInstance(net.dstone.common.utils.XmlUtil.XML_SOURCE_KIND_STRING, net.dstone.common.utils.FileUtil.readFile(queryFile));	sql = net.dstone.common.tools.analyzer.util.ParseUtil.removeMybatisTagFromSql(xml, "/sqlMap/select[@id='test1']", true);	//System.out.println(sql);		sql = net.dstone.common.tools.analyzer.util.ParseUtil.removeBasicTagFromSql(sql, "SELECT");	//System.out.println(sql);	sql = net.dstone.common.utils.SqlUtil.markBrakets(sql);	//System.out.println( sql );		System.out.println( net.dstone.common.utils.SqlUtil.getTableNamesByText(sql) );	*/		queryFile = "D:/Temp/TestSql2.xml";	sql =  net.dstone.common.utils.FileUtil.readFile(queryFile);	sql = net.dstone.common.utils.StringUtil.trimTextForParse(sql);	sql = net.dstone.common.utils.StringUtil.replace(sql, "\r\n", " ");	sql = net.dstone.common.utils.StringUtil.replace(sql, "\n", " ");	sql = sql.toUpperCase().trim();		//System.out.println(net.dstone.common.utils.SqlUtil.getTableNames(sql));	System.out.println(net.dstone.common.utils.SqlUtil.getTableNamesByText(sql));	} catch (Exception e) {	e.printStackTrace();}finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("00.연습장");}/*String searchLine = "TB_005";String[] div = {" ", "{"};System.out.println( "NEXT===>>>[" + net.dstone.common.utils.StringUtil.nextWord(searchLine, "", 0, div) + "]");//System.out.println( "BEFORE===>>>[" + net.dstone.common.utils.StringUtil.beforeWord(searchLine, "", 2, div) + "]");*/