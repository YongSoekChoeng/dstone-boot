/*****************************************************************//*****************************************************************/net.dstone.common.utils.DateUtil.stopWatchStart("00.연습장");try {			//System.setProperty("org.deeplearning4j.datasets.basepath", "C:/Temp/AI");	    // MNIST 데이터셋을 불러옵니다.    org.nd4j.linalg.dataset.api.iterator.DataSetIterator mnistTrain = new org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator(64, true, 12345);    org.nd4j.linalg.dataset.api.iterator.DataSetIterator mnistTest = new org.deeplearning4j.datasets.iterator.impl.MnistDataSetIterator(64, false, 12345);    // 신경망 구성 설정    org.deeplearning4j.nn.conf.MultiLayerConfiguration conf = new org.deeplearning4j.nn.conf.NeuralNetConfiguration.Builder()        .seed(12345)        .optimizationAlgo(org.deeplearning4j.nn.api.OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)        .list()        .layer(0, new org.deeplearning4j.nn.conf.layers.DenseLayer.Builder()            .nIn(28 * 28) // 입력 크기            .nOut(100) // 첫 번째 은닉층의 뉴런 수            .activation(org.nd4j.linalg.activations.Activation.RELU)            .build())        .layer(1, new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)            .nIn(100) // 첫 번째 은닉층의 출력 크기            .nOut(10) // 출력층의 뉴런 수 (10개의 클래스)            .activation(org.nd4j.linalg.activations.Activation.SOFTMAX)            .build())        .build();    /*    // 다층 퍼셉트론(MLP) 생성    org.deeplearning4j.nn.multilayer.MultiLayerNetwork model = new org.deeplearning4j.nn.multilayer.MultiLayerNetwork(conf);    model.init();    model.setListeners(new org.deeplearning4j.optimize.listeners.ScoreIterationListener(10));    // 모델 훈련    for (int i = 0; i < 5; i++) { // 5 에포크 동안 훈련        model.fit(mnistTrain);        System.out.println("Epoch " + i + " complete");    }    // 모델 평가    org.deeplearning4j.eval.Evaluation eval = model.evaluate(mnistTest);    System.out.println(eval.stats());    */} catch (Exception e) {	e.printStackTrace();}finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("00.연습장");}