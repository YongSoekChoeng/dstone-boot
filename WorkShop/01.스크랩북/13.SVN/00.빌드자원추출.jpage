java.util.ArrayList<String> userList = new java.util.ArrayList<String>();/*****************************************************************/boolean isFileGen 			= false;		//	true/false 	build.xml 생성여부// 공통팀 SVN 최종 revision		1830String fromRevision = "1831";	// 반영된 마지막리비젼(이 리비젼 이후값으로 목록생성). 디폴트값 BASIC.String toRevision 	= "HEAD";		// 반영될 마지막리비젼(이 리비젼 이전값으로 목록생성). 디폴트값 HEAD.userList.add("ys.jung"	);		// 사용자ID(정용석)userList.add("hs.ryu"	);		// 사용자ID(류현숙)userList.add("hs.hahm"	);	    // 사용자ID(함혜선)userList.add("hd.lee"	);	    // 사용자ID(이학도)userList.add("ys.jung"	);		// 사용자ID(정용석)userList.add("hs.ryu"	);		// 사용자ID(류현숙)userList.add("hs.hahm"	);	    // 사용자ID(함혜선)userList.add("hd.lee"	);	    // 사용자ID(이학도)userList.add("jm.kim"	);		// 사용자ID(김진민)userList.add("sl.ryu"	);		// 사용자ID(유승래)userList.add("hj.cho"	);		// 사용자ID(조형준)userList.add("hm.kim"	);		// 사용자ID(김현민)userList.add("dh.shin"	);		// 사용자ID(신동혁)userList.add("nr.lee"	);	    // 사용자ID(이나래)/*****************************************************************/net.dstone.common.utils.DateUtil.stopWatchStart("00.연습장");try {		String svnUrl = "https://svn.henergy.solar/scm/repo/scmadmin/hen/hen";	String outFileDir = "C:/he-ide/eGovFrameDev-4.2.0-64bit/workspace/hen/build/hen";		java.util.HashMap<String, String> allUserMap = new java.util.HashMap<String, String>();	allUserMap.put("정용석", "ys.jung");	allUserMap.put("류현숙", "hs.ryu");	allUserMap.put("함혜선", "hs.hahm");	allUserMap.put("이학도", "hd.lee");	allUserMap.put("김진민", "jm.kim");	allUserMap.put("유승래", "sl.ryu");	allUserMap.put("조형준", "hj.cho");	allUserMap.put("김현민", "hm.kim");	allUserMap.put("신동혁", "dh.shin");	allUserMap.put("이나래", "nr.lee");	java.util.ArrayList<String> javaList = new java.util.ArrayList<String>();	java.util.ArrayList<String> resourcesList = new java.util.ArrayList<String>();	java.util.ArrayList<String> henList = new java.util.ArrayList<String>();	java.util.ArrayList<String> webappList = new java.util.ArrayList<String>();		java.util.HashMap<String, java.util.ArrayList<String>> commentPerSvnIdMap = new java.util.HashMap<String, java.util.ArrayList<String>>();	java.util.ArrayList<String> commentPerSvnIdList = new java.util.ArrayList<String>();	java.util.HashMap<String, String> developerPerLineMap = new java.util.HashMap<String, String>();	StringBuffer commentBuff = new StringBuffer();		String[] cli = null;	StringBuffer buff = new StringBuffer();	StringBuffer xlsBuff = new StringBuffer();		String svnId = "";	String ext = "";	String path = "";	String file = "";	String kind = "";	String comment = "";		int divCnt = 0;	boolean isStart = false;	boolean isEnd = false;		int appliedFileNum = 0;	int commitNum = 0;		String divLine = "------------------------------------------------------------------------";		if( userList.size() ==0 ){		cli = new String[]{"svn", "log", svnUrl, "-v", "-r", fromRevision+":"+toRevision};		System.out.println("CMD:" + net.dstone.common.utils.StringUtil.replace(java.util.Arrays.toString(cli), ",", "")  );		String output = net.dstone.common.utils.SystemUtil.executeCli(cli, "EUC-KR");		if( !net.dstone.common.utils.StringUtil.isEmpty(output) ){			String[] lines = net.dstone.common.utils.StringUtil.toStrArray(output, "\n");			for(String line : lines){				line = line.trim();				if("".equals(line)){continue;}				if("Changed paths:".equals(line)){continue;}				//System.out.println("line["+line+"]");								if(divLine.equals(line)){					if( commitNum > 0 ){						isEnd = true;					}else{						isStart = true;						isEnd = false;					}					commitNum++;				}else{					isEnd = false;				}				// SvnId				if(line.startsWith("r") && line.indexOf("|") > -1){					svnId = net.dstone.common.utils.StringUtil.toStrArray(line, "|", true)[1];					if( !commentPerSvnIdMap.containsKey(svnId) ){						commentPerSvnIdMap.put(svnId, new java.util.ArrayList<String>());					}					commentPerSvnIdList = commentPerSvnIdMap.get(svnId);					//commentBuff = commentPerSvnIdMap.get(svnId);				// Add or Modify					}else if( line.startsWith("A /") ||  line.startsWith("M /") ){					line = net.dstone.common.utils.StringUtil.replace(line, "A ", "");					line = net.dstone.common.utils.StringUtil.replace(line, "M ", "");					if(line.indexOf(" (from ") > -1){						line = line.substring(0, line.indexOf(" (from "));					}					if( line.startsWith("/hen/src/main/java/") ){						if( !javaList.contains(line) ){							javaList.add(line);							developerPerLineMap.put(line, svnId);						}					}else if( line.startsWith("/hen/src/main/resources/") ){						if( !resourcesList.contains(line) ){							resourcesList.add(line);							developerPerLineMap.put(line, svnId);						}					}else if( line.startsWith("/hen/src/main/hen/") && !line.startsWith("/hen/src/main/hen/publish") ){						if( !henList.contains(line) ){							henList.add(line);							developerPerLineMap.put(line, svnId);						}					}else if( line.startsWith("/hen/src/main/webapp/") ){						if( !webappList.contains(line) ){							webappList.add(line);							developerPerLineMap.put(line, svnId);						}					}				// Delete					}else if( line.startsWith("D /") ){					// Comment				}else{					if( !line.equals(divLine) && line.indexOf("build/hen/build") == -1 ){						commentBuff.append("\t").append(line).append("\n");					}				}				if(isEnd){					if( 						!commentBuff.toString().trim().startsWith("[개발") 						&& !commentBuff.toString().trim().startsWith("[검증") 						&& !commentBuff.toString().trim().startsWith("[운영") 						&& !commentBuff.toString().trim().startsWith("[오즈") 						&& !commentBuff.toString().trim().startsWith("긴급 [") 					){						comment = commentBuff.toString();						if( comment.endsWith("\n") ){							comment = comment.substring(0, comment.length()-1);						}						if(!commentPerSvnIdList.contains(comment)){							commentPerSvnIdList.add(comment);						}					}					commentBuff = new StringBuffer();				}			}		}	}else{		for(String userId : userList){			cli = new String[]{"svn", "log", svnUrl, "--search", userId, "-v", "-r", fromRevision+":" + toRevision};			System.out.println("CMD:" + net.dstone.common.utils.StringUtil.replace(java.util.Arrays.toString(cli), ",", "")  );			String output = net.dstone.common.utils.SystemUtil.executeCli(cli, "EUC-KR");			if( !net.dstone.common.utils.StringUtil.isEmpty(output) ){				String[] lines = net.dstone.common.utils.StringUtil.toStrArray(output, "\n");				for(String line : lines){					line = line.trim();					if("".equals(line)){continue;}					if("Changed paths:".equals(line)){continue;}					//System.out.println("line["+line+"]");										if(divLine.equals(line)){						if( commitNum > 0 ){							isEnd = true;						}else{							isStart = true;							isEnd = false;						}						commitNum++;					}else{						isEnd = false;					}					// SvnId					if(line.startsWith("r") && line.indexOf("|") > -1){						svnId = net.dstone.common.utils.StringUtil.toStrArray(line, "|", true)[1];						if( !commentPerSvnIdMap.containsKey(svnId) ){							commentPerSvnIdMap.put(svnId, new java.util.ArrayList<String>());						}						commentPerSvnIdList = commentPerSvnIdMap.get(svnId);						//commentBuff = commentPerSvnIdMap.get(svnId);					// Add or Modify						}else if( line.startsWith("A /") ||  line.startsWith("M /") ){						line = net.dstone.common.utils.StringUtil.replace(line, "A ", "");						line = net.dstone.common.utils.StringUtil.replace(line, "M ", "");						if(line.indexOf(" (from ") > -1){							line = line.substring(0, line.indexOf(" (from "));						}						if( line.startsWith("/hen/src/main/java/") ){							if( !javaList.contains(line) ){								javaList.add(line);								developerPerLineMap.put(line, svnId);							}						}else if( line.startsWith("/hen/src/main/resources/") ){							if( !resourcesList.contains(line) ){								resourcesList.add(line);								developerPerLineMap.put(line, svnId);							}						}else if( line.startsWith("/hen/src/main/hen/") && !line.startsWith("/hen/src/main/hen/publish") ){							if( !henList.contains(line) ){								henList.add(line);								developerPerLineMap.put(line, svnId);							}						}else if( line.startsWith("/hen/src/main/webapp/") ){							if( !webappList.contains(line) ){								webappList.add(line);								developerPerLineMap.put(line, svnId);							}						}					// Delete						}else if( line.startsWith("D /") ){						// Comment					}else{						if( !line.equals(divLine) && line.indexOf("build/hen/build") == -1 ){							commentBuff.append("\t").append(line).append("\n");						}					}										if(isEnd){						if( 							!commentBuff.toString().trim().startsWith("[개발") 							&& !commentBuff.toString().trim().startsWith("[검증") 							&& !commentBuff.toString().trim().startsWith("[운영") 							&& !commentBuff.toString().trim().startsWith("[오즈") 							&& !commentBuff.toString().trim().startsWith("긴급 [") 						){							comment = commentBuff.toString();							if( comment.endsWith("\n") ){								comment = comment.substring(0, comment.length()-1);							}							if(!commentPerSvnIdList.contains(comment)){								commentPerSvnIdList.add(comment);							}						}						commentBuff = new StringBuffer();					}				}			}		}	}	java.util.Collections.sort(javaList);	java.util.Collections.sort(resourcesList);	java.util.Collections.sort(henList);	java.util.Collections.sort(webappList);	buff.append("<?xml version=\"1.0\"?>").append("\n");	buff.append("<project name=\"cicd\">").append("\n");	buff.append("	<target name=\"copy\">").append("\n");		String keyword = "";	StringBuffer javaBuff = new StringBuffer();		/******************************** A. JAVA 자원 시작 ********************************/	keyword = "/hen/src/main/java/";	if(javaList.size() > 0){		javaBuff.append("		<!-- JAVA 자원 --> ").append("\n");		javaBuff.append("		<copy todir=\"/app/hen/src/main/java\" verbose=\"true\"> ").append("\n");		javaBuff.append("		    <fileset dir=\"src/main/java\" includes=\"dummy\"> ").append("\n");		for(String line : javaList){						/********************* EXCEL 시작 *********************/			ext = net.dstone.common.utils.FileUtil.getFileExt(line);			if( line.indexOf(".") > -1 ){				path = net.dstone.common.utils.FileUtil.getFilePath(line);				file = net.dstone.common.utils.FileUtil.getFileName(line);				kind = "Service";				if(path.endsWith("/web")){					kind = "Controller";				}				//xlsBuff.append(kind).append("\t").append(path).append("\t").append(file).append("\n");			}			/********************* EXCEL 끝 *********************/						if( line.indexOf(keyword) == -1 ){				continue;			}			line = net.dstone.common.utils.StringUtil.replace(line, keyword, "");			javaBuff.append("		        <include name=\""+line+"\"/>").append("\n");appliedFileNum++;		}		javaBuff.append("		    </fileset>").append("\n");		javaBuff.append("		</copy>").append("\n");	}	buff.append(javaBuff);	/******************************** A. JAVA 자원 끝 ********************************/	/******************************** B. SQL 자원 시작 ********************************/	StringBuffer resourcesBuff = new StringBuffer();	keyword = "/hen/src/main/resources/egovframework/sqlmap/mappers/frameq/";	if(resourcesList.size() > 0){		resourcesBuff.append("		<!-- SQL 자원 --> ").append("\n");		resourcesBuff.append("		<copy todir=\"/app/hen/src/main/resources/egovframework/sqlmap/mappers/frameq\" verbose=\"true\"> ").append("\n");		resourcesBuff.append("		    <fileset dir=\"src/main/resources/egovframework/sqlmap/mappers/frameq\" includes=\"dummy\"> ").append("\n");		for(String line : resourcesList){			/********************* EXCEL 시작 *********************/			ext = net.dstone.common.utils.FileUtil.getFileExt(line);			if( line.indexOf(".") > -1 ){				path = net.dstone.common.utils.FileUtil.getFilePath(line);				file = net.dstone.common.utils.FileUtil.getFileName(line);				kind = ext.toUpperCase();				//xlsBuff.append(kind).append("\t").append(path).append("\t").append(file).append("\n");			}			/********************* EXCEL 끝 *********************/						if( line.indexOf(keyword) == -1 ){				continue;			}			line = net.dstone.common.utils.StringUtil.replace(line, keyword, "");			resourcesBuff.append("		        <include name=\""+line+"\"/>").append("\n");appliedFileNum++;		}		resourcesBuff.append("		    </fileset>").append("\n");		resourcesBuff.append("		</copy>").append("\n");	}	keyword = "/hen/src/main/resources/properties/";	if(resourcesList.size() > 0){		resourcesBuff.append("		<!-- Properties 자원 --> ").append("\n");		resourcesBuff.append("		<copy todir=\"/app/hen/src/main/resources/properties\" verbose=\"true\"> ").append("\n");		resourcesBuff.append("		    <fileset dir=\"src/main/resources/properties\" includes=\"dummy\">").append("\n");		for(String line : resourcesList){						if( line.indexOf(keyword) == -1 ){				continue;			}			line = net.dstone.common.utils.StringUtil.replace(line, keyword, "");			resourcesBuff.append("		        <include name=\""+line+"\"/>").append("\n");appliedFileNum++;		}		resourcesBuff.append("		    </fileset>").append("\n");		resourcesBuff.append("		</copy>").append("\n");	}	buff.append(resourcesBuff);	/******************************** B. SQL 자원 끝 ********************************/	/******************************** C. Nexacro 자원 시작 ********************************/	StringBuffer henBuff = new StringBuffer();	keyword = "/hen/src/main/hen/";	if(henList.size() > 0){		henBuff.append("		<!-- Nexacro 자원 --> ").append("\n");		henBuff.append("		<copy todir=\"/app/hen/src/main/hen\" verbose=\"true\"> ").append("\n");		henBuff.append("		    <fileset dir=\"src/main/hen\" includes=\"dummy\">").append("\n");		for(String line : henList){			/********************* EXCEL 시작 *********************/			ext = net.dstone.common.utils.FileUtil.getFileExt(line);			if( line.indexOf(".") > -1 ){				path = net.dstone.common.utils.FileUtil.getFilePath(line);				file = net.dstone.common.utils.FileUtil.getFileName(line);				kind = "UI";				if( !ext.equals("xadl") && !ext.equals("xprj") && !ext.equals("xfdl") && !ext.equals("js") && !ext.equals("xml") ){					kind = "DESIGN";				}				//xlsBuff.append(kind).append("\t").append(path).append("\t").append(file).append("\n");			}			/********************* EXCEL 끝 *********************/						if( line.indexOf(keyword) == -1 ){				continue;			}			line = net.dstone.common.utils.StringUtil.replace(line, keyword, "");			henBuff.append("		        <include name=\""+line+"\"/>").append("\n");appliedFileNum++;		}		henBuff.append("		    </fileset>").append("\n");		henBuff.append("		</copy>").append("\n");	}	buff.append(henBuff);	/******************************** C. Nexacro 자원 끝 ********************************/	/******************************** D. Oz 자원 시작 ********************************/	StringBuffer webappBuff = new StringBuffer();	keyword = "/hen/src/main/webapp/WEB-INF/repository_files/";	if(webappList.size() > 0){		webappBuff.append("		<!-- Oz 자원 --> ").append("\n");		webappBuff.append("		<copy todir=\"/app/hen/src/main/webapp/WEB-INF/repository_files\" verbose=\"true\"> ").append("\n");		webappBuff.append("		    <fileset dir=\"src/main/webapp/WEB-INF/repository_files\" includes=\"dummy\"> ").append("\n");		for(String line : webappList){			/********************* EXCEL 시작 *********************/			ext = net.dstone.common.utils.FileUtil.getFileExt(line);			if( line.indexOf(".") > -1 ){				path = net.dstone.common.utils.FileUtil.getFilePath(line);				file = net.dstone.common.utils.FileUtil.getFileName(line);				kind = ext.toUpperCase();				if(kind.equals("OZR")){					kind = "OZ";				}				//xlsBuff.append(kind).append("\t").append(path).append("\t").append(file).append("\n");			}			/********************* EXCEL 끝 *********************/						if( line.indexOf(keyword) == -1 ){				continue;			}			line = net.dstone.common.utils.StringUtil.replace(line, keyword, "");			webappBuff.append("		        <include name=\""+line+"\"/>").append("\n");appliedFileNum++;		}		webappBuff.append("		    </fileset>").append("\n");		webappBuff.append("		</copy>").append("\n");	}	buff.append(webappBuff);	/******************************** D. Oz 자원 끝 ********************************/	/******************************** E. Libary 자원 시작 ********************************/	StringBuffer libBuff = new StringBuffer();	keyword = "/hen/src/main/webapp/WEB-INF/lib/";	if(webappList.size() > 0){		libBuff.append("		<!-- Libary 자원 --> ").append("\n");		libBuff.append("		<copy todir=\"/app/hen/src/main/webapp/WEB-INF/lib\" verbose=\"true\"> ").append("\n");		libBuff.append("		    <fileset dir=\"src/main/webapp/WEB-INF/lib\" includes=\"dummy\"> ").append("\n");		for(String line : webappList){			/********************* EXCEL 시작 *********************/			ext = net.dstone.common.utils.FileUtil.getFileExt(line);			if( line.indexOf(".") > -1 ){				path = net.dstone.common.utils.FileUtil.getFilePath(line);				file = net.dstone.common.utils.FileUtil.getFileName(line);				kind = ext.toUpperCase();				if(kind.equals("JAR")){					kind = "JAR";				}				//xlsBuff.append(kind).append("\t").append(path).append("\t").append(file).append("\n");			}			/********************* EXCEL 끝 *********************/						if( line.indexOf(keyword) == -1 ){				continue;			}			line = net.dstone.common.utils.StringUtil.replace(line, keyword, "");			libBuff.append("		        <include name=\""+line+"\"/>").append("\n");appliedFileNum++;		}		libBuff.append("		    </fileset>").append("\n");		libBuff.append("		</copy>").append("\n");	}	buff.append(libBuff);	/******************************** D. Oz 자원 끝 ********************************/		buff.append("	</target>").append("\n");	buff.append("</project>").append("\n");	System.out.println("");	System.out.println("============================== Build.xml ==============================");	System.out.println(buff);		System.out.println("");	System.out.println("============================== Comment ==============================");	commentBuff = new StringBuffer();	java.util.Iterator<String> iter = commentPerSvnIdMap.keySet().iterator();	if( webappList.size() > 0 ){		commentBuff.append("[검증, 운영, 오즈]").append("\n");	}else{		commentBuff.append("[검증, 운영]").append("\n");	}	while( iter.hasNext() ){		svnId = iter.next();		commentPerSvnIdList = commentPerSvnIdMap.get(svnId);		if(commentPerSvnIdList.size() > 0){			StringBuffer commentPerSvnIdBuff = new StringBuffer();			commentPerSvnIdBuff.append("<"+svnId+">").append("\n");			int commentNumPerSvnId = 0;			for(String commentStr : commentPerSvnIdList){				if( !net.dstone.common.utils.StringUtil.isEmpty(commentStr) ){					commentPerSvnIdBuff.append(commentStr).append("\n");					commentNumPerSvnId++;				}			}			if(commentNumPerSvnId > 0){				commentBuff.append(commentPerSvnIdBuff);			}		}	}	System.out.println(commentBuff);	if(isFileGen){		net.dstone.common.utils.FileUtil.writeFile( outFileDir, "build_"+net.dstone.common.utils.DateUtil.getToDate("yyyyMMddHH")+".xml", buff.toString());	}	System.out.println("");	System.out.println("============================== 결과종합 ==============================");	System.out.println("수정 건수["+( javaList.size() + resourcesList.size() + henList.size() + webappList.size() )+"]건.");	System.out.println("XML에 기록된 반영대상건수["+appliedFileNum+"]건.");		System.out.println("");		} catch (Exception e) {	e.printStackTrace();}finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("00.연습장");}