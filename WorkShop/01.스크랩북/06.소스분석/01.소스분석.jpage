/***************************************************** Global Setting Start *****************************************************//* 진행할 작업단계(전체작업단계 JOB_KIND_11 ~ JOB_KIND_99에서 세팅된 작업단계까지 분석을 진행한다.) */int 					analyzeJobKind 							= net.dstone.common.tools.analyzer.AppAnalyzer.JOB_KIND_13_ANALYZE_CLASS_ALIAS;/* 작업단계에서 단위작업만 진행할지 여부. true-해당작업(JOB_KIND_XX)만 수행. false-처음부터 해당작업까지(JOB_KIND_11 ~ JOB_KIND_XX) 수행. */boolean 				isUnitOnly 								= false;/***************************************************** Global Setting End *****************************************************//* +++++++++++++++++++++++++++++++++++++++++++++ Application Setting Start +++++++++++++++++++++++++++++++++++++++++++++ */String					configPath								= "";String 					rootPath 								= "";	/* 프로젝트 루트 디렉토리 */String 					classRootPath 							= "";	/* 클래스 루트 디렉토리 */String 					webRootPath 							= "";	/* 웹 루트 디렉토리 */String 					queryRootPath 							= "";	/* 쿼리 루트 디렉토리 */String[] 				excludePackagePattern 					= null; /* 분석제외패키지패턴 목록(분석제외대상 패키지 패턴. 해당 패키지명이 속하는 패키지는 분석제외한다.) */java.util.List<String>	includePackageRoot 						= new java.util.ArrayList<String>();	/* 분석패키지루트 목록(분석대상 패키지 루트. 해당 패키지이하의 모듈만 분석한다.) */// 프레임웍configPath														= "D:/AppHome/framework/dstone-boot/src/main/resources/tools/analyzer/config.xml";rootPath 														= "D:/AppHome/framework/dstone-boot/src/main";classRootPath 													= rootPath + "/" + "java";webRootPath 													= rootPath + "/" + "webapp";excludePackagePattern 											= new String[] {".vo.", ".vo", "VO", "Vo", ".model."};includePackageRoot												.add("net.dstone.sample.analyze");queryRootPath 													= "D:/AppHome/framework/dstone-boot/src/main/resources/sqlmap";// AIB/*configPath														= "D:/AppHome/framework/dstone-boot/src/main/resources/tools/analyzer/config.xml";rootPath 														= "D:/Swap/참조소스/AIB/src/main";classRootPath 													= rootPath + "/" + "java";webRootPath 													= rootPath + "/" + "webapp";excludePackagePattern 											= new String[] {".vo.", ".vo", "VO", "Vo", ".model."};includePackageRoot												.add("kr.co.buttle.seize.common.service");includePackageRoot												.add("kr.co.buttle.seize.app");queryRootPath 													= "D:/Swap/참조소스/AIB/src/main/webapp/WEB-INF/mappers/seize/app";*/// 동부화재/*configPath														= "D:/AppHome/framework/dstone-boot/src/main/resources/tools/analyzer/config.xml";rootPath 														= "D:/Swap/참조소스/동부화재/AppHome";classRootPath 													= rootPath + "/WorkShop/" + "src";webRootPath 													= rootPath + "/" + "WebContent";excludePackagePattern 											= new String[] {".vo.", ".vo", "VO", "Vo", ".model."};includePackageRoot												.add("com.lgcns.ikep4.miplatform");queryRootPath 													= classRootPath;*///토스ERP/*configPath														= "D:/AppHome/framework/dstone-boot/src/main/resources/tools/analyzer/config-anybiz.xml";rootPath 														= "D:/AppHome/anybiz_prd";classRootPath 													= rootPath + "/WEB-INF/classes";webRootPath 													= rootPath + "/WEB-INF/views";excludePackagePattern 											= new String[] {".vo.", ".vo", "VO", "Vo", ".model."};includePackageRoot												.add("kr.co.gnx");queryRootPath 													= rootPath + "/WEB-INF/classes/sqlmap/mapper";*///토스수수료/*rootPath 														= "D:/Swap/참조소스/승재/cms4_prd";classRootPath 													= rootPath + "/WEB-INF/classes";webRootPath 													= rootPath + "/WEB-INF/views";excludePackagePattern 											= new String[] {".vo.", ".vo", "VO", "Vo", ".model."};includePackageRoot												.add("kr.co.gnx");queryRootPath 													= rootPath + "/WEB-INF/classes/sqlmap/mapper";*//* +++++++++++++++++++++++++++++++++++++++++++++ Application Setting End +++++++++++++++++++++++++++++++++++++++++++++ */try {	net.dstone.common.utils.DateUtil.stopWatchStart("01.소스분석");	// 1.분석모듈 인스턴스 생성	net.dstone.common.tools.analyzer.AppAnalyzer appAnalyzer = net.dstone.common.tools.analyzer.AppAnalyzer.getInstance(		configPath			, rootPath		, classRootPath		, webRootPath		, includePackageRoot.toArray(new String[includePackageRoot.size()])		, excludePackagePattern		, queryRootPath	);	// 2.초기화	if( !isUnitOnly ){		appAnalyzer.initAll();	}	// 3.분석진행(파라메터로 진행단계 조절)	appAnalyzer.analyzeApp(analyzeJobKind, isUnitOnly);	// 4.분석결과 DB저장	appAnalyzer.saveToDb();	}catch(Exception e){	e.printStackTrace();}finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("01.소스분석");}/***********************************************************************************************************************<부가기능>1. DDL 생성System.out.println( net.dstone.common.tools.analyzer.util.DbGen.getDdlQuery("MYSQL", "CREATE") ); // MYSQL/ORACLE, DROP/CREATE2. 삭제쿼리 생성System.out.println( net.dstone.common.tools.analyzer.util.DbGen.getDeleteQuery() );3. 조회net.dstone.common.tools.analyzer.util.DbGen.selectTB_FUNC_ALL("DBID_2", "", "", "Y", "Y").checkData();4. 테이블정보파일생성net.dstone.common.tools.analyzer.AppAnalyzer.WRITE_PATH = "D:/Temp/anlaysis/";net.dstone.common.tools.analyzer.util.ParseUtil.makeMannalTableListFileFromDb("DBID_2", "TB_");***********************************************************************************************************************/