/***************************************************** Setting Start *****************************************************//* DBID */String DBID 										= "DBID_2";			// DBID_1(오라클)/DBID_2(MYSQL)/* 프로젝트 루트 디렉토리 */String 		rootPath 								= "";/* 클래스 루트 디렉토리 */String 		classRootPath 							= "";/* 웹 루트 디렉토리 */String 		webRootPath 							= "";/* 분석패키지루트 목록(분석대상 패키지 루트. 해당 패키지이하의 모듈만 분석한다.) */java.util.List<String> 	includePackageRoot 			= new java.util.ArrayList<String>();/* 분석제외패키지패턴 목록(분석제외대상 패키지 패턴. 해당 패키지명이 속하는 패키지는 분석제외한다.) */String[] 	excludePackagePattern 					= {".vo.", ".vo", "VO", "Vo", ".model."};/* 쿼리 루트 디렉토리 */String 		queryRootPath 							= "";/* 중간산출물 저장디렉토리 */String 		writePath 								= "D:/Temp/anlaysis/";/* 테이블목록을 DB로부터 읽어올지 여부. */boolean 	isTableListFromDb						= false;/* 테이블명을 DB로부터 읽어올때 적용할 프리픽스(isTableListFromDb 가 true일 경우에만 유효) */String 		tableNameLikeStr 						= "";/* 작업결과를 DB에 저장할지 여부 */boolean		isSaveToDb 								= false;/* 분석작업을 진행 할 쓰레드핸들러 종류 */net.dstone.common.tools.analyzer.AppAnalyzer.WORKER_THREAD_KIND = net.dstone.common.tools.analyzer.AppAnalyzer.WORKER_THREAD_KIND_FIXED;/* 분석작업을 진행 할 쓰레드 갯수(Fixed 쓰레드풀 일 경우에만 유효) */int 		workerThreadNum 						= 20;	// Runtime.getRuntime().availableProcessors()// 프레임웍/*rootPath 											= "D:/AppHome/framework/dstone-boot/src/main";classRootPath 										= rootPath + "/" + "java";webRootPath 										= rootPath + "/" + "webapp";includePackageRoot									.add("net.dstone.sample");includePackageRoot									.add("net.dstone.common.security");queryRootPath 										= "D:/AppHome/framework/dstone-boot/src/main/resources/sqlmap";*/// AIB/*rootPath 											= "D:/Swap/참조소스/AIB/src/main";classRootPath 										= rootPath + "/" + "java";webRootPath 										= rootPath + "/" + "webapp";includePackageRoot									.add("kr.co.buttle.seize.common.service");includePackageRoot									.add("kr.co.buttle.seize.app");queryRootPath 										= "D:/Swap/참조소스/AIB/src/main/webapp/WEB-INF/mappers/seize/app";*/// 동부화재/*rootPath 											= "D:/Swap/참조소스/동부화재/AppHome";classRootPath 										= rootPath + "/WorkShop/" + "src";webRootPath 										= rootPath + "/" + "WebContent";includePackageRoot									.add("com.lgcns.ikep4.miplatform");queryRootPath 										= classRootPath;*///토스ERProotPath 											= "D:/Swap/참조소스/승재/anybiz_prd";classRootPath 										= rootPath + "/WEB-INF/classes";webRootPath 										= rootPath + "/WEB-INF/views";includePackageRoot									.add("kr.co.gnx");queryRootPath 										= rootPath + "/WEB-INF/classes/sqlmap/mapper";//토스수수료/*rootPath 											= "D:/Swap/참조소스/승재/cms4_prd";classRootPath 										= rootPath + "/WEB-INF/classes";webRootPath 										= rootPath + "/WEB-INF/views";includePackageRoot									.add("kr.co.gnx");queryRootPath 										= rootPath + "/WEB-INF/classes/sqlmap/mapper";*//***************************************************** Setting End *****************************************************/try {	net.dstone.common.utils.DateUtil.stopWatchStart("01.소스분석");	// 분석진행단계	int ANALYZE_JOB_KIND = net.dstone.common.tools.analyzer.AppAnalyzer.JOB_KIND_51_ANALYZE_SAVE_METRIX;	// true 일 경우 해당작업만 수행. false 일 경우 처음부터 해당작업까지만 수행.	boolean isUnitOnly = false;	// 1.분석모듈 인스턴스 생성	net.dstone.common.tools.analyzer.AppAnalyzer appAnalyzer = net.dstone.common.tools.analyzer.AppAnalyzer.getInstance(		DBID		, rootPath		, classRootPath		, webRootPath		, includePackageRoot.toArray(new String[includePackageRoot.size()])		, excludePackagePattern		, queryRootPath		, writePath		, isTableListFromDb		, tableNameLikeStr		, workerThreadNum		, isSaveToDb	);	// 2.초기화	if( !isUnitOnly ){		appAnalyzer.initAll();	}	// 3.분석진행(파라메터로 진행단계 조절)	appAnalyzer.analyzeApp(ANALYZE_JOB_KIND, isUnitOnly);	// 4.분석결과 DB저장	appAnalyzer.saveToDb();	}catch(Exception e){	e.printStackTrace();}finally{	net.dstone.common.utils.DateUtil.stopWatchEnd("01.소스분석");}/***********************************************************************************************************************<부가기능>1. DDL 생성System.out.println( net.dstone.common.tools.analyzer.util.DbGen.getDdlQuery("MYSQL", "CREATE") ); // MYSQL/ORACLE, DROP/CREATE2. 삭제쿼리 생성System.out.println( net.dstone.common.tools.analyzer.util.DbGen.getDeleteQuery() );3. 조회net.dstone.common.tools.analyzer.util.DbGen.selectTB_FUNC_ALL("DBID_2", "", "", "Y", "Y").checkData();***********************************************************************************************************************/